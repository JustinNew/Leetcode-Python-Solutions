# 313. Super Ugly Number

'''
Write a program to find the nth super ugly number.

Super ugly numbers are positive numbers whose all prime factors are in the given prime list primes of size k.

Input: n = 12, primes = [2,7,13,19]
Output: 32 
Explanation: [1,2,4,7,8,13,14,16,19,26,28,32] is the sequence of the first 12 
             super ugly numbers given primes = [2,7,13,19] of size 4.
'''

class Solution(object):

    # A candidate queue for each of the primes
    # Candidate queue is generated by the already added ugly number 
    def nthSuperUglyNumber(self, n, primes):
        """
        :type n: int
        :type primes: List[int]
        :rtype: int
        """

        result = [1]
        count = 1

        candidates = [0 for i in range(len(primes))]

        while count < n:

            # Generate candidates for each prime.
            for i in range(len(primes)):
                while result[candidates[i]] * primes[i] <= result[-1]:
                    candidates[i] += 1

            toselect = [result[candidates[i]] * primes[i] for i in range(len(primes))]
            a = min(toselect)
            result.append(a)
            count += 1

        return result[-1]
